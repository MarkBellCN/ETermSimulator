using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using ETermSimulator;

namespace ETermSimulatorTest
{
    [TestClass]
    public class BaseRespTest
    {
        #region SplitSegments
        [TestMethod]
        public void SplitSegments_正常()//解析加法运算结果=2.0000
        {
            var po = new PrivateObject(new BaseResp(null));
            byte[] arg = new byte[] { 1, 0, 0, 40, 0, 0, 0, 1, 40, 81, 112, 2, 27, 11, 33, 32, 15, 27, 77, 32, 32, 32, 32, 32, 32, 61, 32, 50, 46, 48, 48, 48, 48, 32, 32, 13, 30, 27, 98, 3 };
            var r = (List<byte[]>)po.Invoke("SplitSegments", new object[] { arg });
            Assert.AreEqual(r.Count, 3);
            Assert.AreEqual(string.Join(",", r[0]), string.Join(",", new byte[] { 27, 11, 33, 32, 15 }));
            Assert.AreEqual(string.Join(",", r[1]), string.Join(",", new byte[] { 27, 77, 32, 32, 32, 32, 32, 32, 61, 32, 50, 46, 48, 48, 48, 48, 32, 32, 13, 30 }));
            Assert.AreEqual(string.Join(",", r[2]), string.Join(",", new byte[] { 27, 98 }));

        }

        [TestMethod]
        public void SplitSegements_AV()
        {
            var po = new PrivateObject(new BaseResp(null));
            byte[] arg = new byte[] { 1, 0, 3, 77, 0, 0, 0, 1, 40, 81, 112, 2, 27, 11, 33, 32, 15, 27, 77, 32, 50, 53, 83, 69, 80, 40, 87, 69, 68, 41, 32, 83, 72, 65, 67, 71, 79, 32, 32, 13, 49, 32, 32, 32, 77, 85, 53, 51, 57, 53, 32, 32, 83, 72, 65, 67, 71, 79, 32, 48, 56, 48, 53, 32, 32, 32, 48, 57, 52, 53, 32, 32, 32, 51, 50, 51, 32, 48, 94, 83, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 70, 65, 32, 80, 81, 32, 65, 83, 32, 89, 65, 32, 66, 81, 60, 84, 50, 45, 45, 62, 32, 32, 13, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 81, 32, 69, 81, 32, 72, 81, 32, 75, 81, 32, 76, 81, 32, 78, 81, 32, 82, 81, 32, 83, 81, 32, 86, 81, 32, 84, 81, 32, 71, 81, 32, 90, 81, 32, 81, 81, 32, 85, 81, 32, 88, 81, 32, 13, 50, 32, 32, 32, 77, 85, 53, 52, 48, 32, 32, 32, 80, 86, 71, 67, 71, 79, 32, 48, 56, 52, 53, 32, 32, 32, 49, 48, 52, 48, 32, 32, 32, 51, 50, 48, 32, 48, 94, 83, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 74, 54, 32, 67, 81, 32, 68, 81, 32, 73, 81, 32, 79, 81, 60, 84, 49, 45, 45, 62, 32, 32, 13, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 89, 65, 32, 66, 81, 32, 77, 81, 32, 69, 81, 32, 72, 81, 32, 75, 81, 32, 76, 81, 32, 78, 81, 32, 82, 81, 32, 83, 81, 32, 86, 81, 32, 84, 81, 32, 71, 81, 32, 90, 81, 32, 81, 81, 32, 85, 81, 32, 88, 83, 32, 32, 32, 13, 51, 32, 32, 42, 77, 85, 57, 51, 50, 55, 32, 32, 83, 72, 65, 67, 71, 79, 32, 48, 57, 53, 48, 32, 32, 32, 49, 49, 52, 48, 32, 32, 32, 55, 51, 56, 32, 48, 94, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 70, 54, 32, 80, 81, 32, 65, 49, 32, 89, 52, 32, 66, 81, 60, 84, 50, 45, 45, 62, 32, 32, 13, 32, 32, 32, 32, 70, 77, 57, 51, 50, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 81, 32, 69, 81, 32, 72, 81, 32, 75, 81, 32, 76, 81, 32, 78, 81, 32, 82, 81, 32, 83, 81, 32, 86, 81, 32, 84, 81, 32, 71, 81, 32, 90, 81, 32, 81, 81, 32, 85, 81, 32, 88, 81, 32, 13, 52, 43, 32, 32, 70, 77, 57, 51, 50, 55, 32, 32, 83, 72, 65, 67, 71, 79, 32, 48, 57, 53, 48, 32, 32, 32, 49, 49, 52, 48, 32, 32, 32, 55, 51, 56, 32, 48, 94, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 70, 54, 32, 80, 81, 32, 65, 49, 32, 89, 52, 32, 66, 81, 60, 84, 50, 45, 45, 62, 32, 32, 13, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 81, 32, 69, 81, 32, 72, 81, 32, 75, 81, 32, 76, 81, 32, 78, 81, 32, 82, 81, 32, 83, 81, 32, 86, 81, 32, 84, 81, 32, 71, 81, 32, 90, 81, 32, 81, 81, 32, 85, 81, 32, 88, 81, 32, 13, 42, 42, 32, 32, 42, 42, 32, 32, 67, 90, 45, 83, 72, 65, 32, 32, 67, 72, 69, 67, 75, 32, 73, 78, 32, 52, 53, 32, 77, 73, 78, 85, 84, 69, 83, 32, 66, 69, 70, 79, 82, 69, 32, 68, 69, 80, 65, 82, 84, 85, 82, 69, 32, 32, 13, 42, 42, 32, 32, 65, 108, 108, 32, 115, 99, 104, 101, 100, 117, 108, 101, 100, 32, 77, 85, 32, 111, 114, 32, 70, 77, 32, 102, 108, 105, 103, 104, 116, 115, 32, 111, 112, 101, 114, 97, 116, 101, 100, 32, 98, 121, 32, 77, 85, 32, 111, 114, 32, 70, 77, 32, 97, 114, 101, 32, 34, 69, 97, 115, 116, 101, 114, 110, 32, 69, 120, 112, 114, 101, 115, 115, 34, 32, 32, 32, 42, 42, 32, 32, 72, 79, 32, 70, 76, 73, 71, 72, 84, 32, 68, 69, 80, 65, 82, 84, 85, 82, 69, 47, 65, 82, 82, 73, 86, 65, 76, 32, 65, 84, 32, 80, 86, 71, 32, 84, 50, 32, 70, 82, 79, 77, 32, 49, 56, 68, 69, 67, 49, 50, 44, 32, 13, 42, 42, 32, 32, 72, 79, 32, 80, 86, 71, 32, 67, 72, 69, 67, 75, 32, 73, 78, 32, 52, 53, 32, 77, 73, 78, 85, 84, 69, 83, 32, 66, 69, 70, 79, 82, 69, 32, 68, 69, 80, 65, 82, 84, 85, 82, 69, 32, 13, 30, 27, 98, 3 };
            var r = (List<byte[]>)po.Invoke("SplitSegments", new object[] { arg });
            Assert.AreEqual(r.Count, 3);
            Assert.AreEqual(string.Join(",", r[0]), string.Join(",", new byte[] { 27, 11, 33, 32, 15 }));
            Assert.AreEqual(string.Join(",", r[1]), string.Join(",", new byte[] { 27, 77, 32, 50, 53, 83, 69, 80, 40, 87, 69, 68, 41, 32, 83, 72, 65, 67, 71, 79, 32, 32, 13, 49, 32, 32, 32, 77, 85, 53, 51, 57, 53, 32, 32, 83, 72, 65, 67, 71, 79, 32, 48, 56, 48, 53, 32, 32, 32, 48, 57, 52, 53, 32, 32, 32, 51, 50, 51, 32, 48, 94, 83, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 70, 65, 32, 80, 81, 32, 65, 83, 32, 89, 65, 32, 66, 81, 60, 84, 50, 45, 45, 62, 32, 32, 13, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 81, 32, 69, 81, 32, 72, 81, 32, 75, 81, 32, 76, 81, 32, 78, 81, 32, 82, 81, 32, 83, 81, 32, 86, 81, 32, 84, 81, 32, 71, 81, 32, 90, 81, 32, 81, 81, 32, 85, 81, 32, 88, 81, 32, 13, 50, 32, 32, 32, 77, 85, 53, 52, 48, 32, 32, 32, 80, 86, 71, 67, 71, 79, 32, 48, 56, 52, 53, 32, 32, 32, 49, 48, 52, 48, 32, 32, 32, 51, 50, 48, 32, 48, 94, 83, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 74, 54, 32, 67, 81, 32, 68, 81, 32, 73, 81, 32, 79, 81, 60, 84, 49, 45, 45, 62, 32, 32, 13, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 89, 65, 32, 66, 81, 32, 77, 81, 32, 69, 81, 32, 72, 81, 32, 75, 81, 32, 76, 81, 32, 78, 81, 32, 82, 81, 32, 83, 81, 32, 86, 81, 32, 84, 81, 32, 71, 81, 32, 90, 81, 32, 81, 81, 32, 85, 81, 32, 88, 83, 32, 32, 32, 13, 51, 32, 32, 42, 77, 85, 57, 51, 50, 55, 32, 32, 83, 72, 65, 67, 71, 79, 32, 48, 57, 53, 48, 32, 32, 32, 49, 49, 52, 48, 32, 32, 32, 55, 51, 56, 32, 48, 94, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 70, 54, 32, 80, 81, 32, 65, 49, 32, 89, 52, 32, 66, 81, 60, 84, 50, 45, 45, 62, 32, 32, 13, 32, 32, 32, 32, 70, 77, 57, 51, 50, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 81, 32, 69, 81, 32, 72, 81, 32, 75, 81, 32, 76, 81, 32, 78, 81, 32, 82, 81, 32, 83, 81, 32, 86, 81, 32, 84, 81, 32, 71, 81, 32, 90, 81, 32, 81, 81, 32, 85, 81, 32, 88, 81, 32, 13, 52, 43, 32, 32, 70, 77, 57, 51, 50, 55, 32, 32, 83, 72, 65, 67, 71, 79, 32, 48, 57, 53, 48, 32, 32, 32, 49, 49, 52, 48, 32, 32, 32, 55, 51, 56, 32, 48, 94, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 70, 54, 32, 80, 81, 32, 65, 49, 32, 89, 52, 32, 66, 81, 60, 84, 50, 45, 45, 62, 32, 32, 13, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 81, 32, 69, 81, 32, 72, 81, 32, 75, 81, 32, 76, 81, 32, 78, 81, 32, 82, 81, 32, 83, 81, 32, 86, 81, 32, 84, 81, 32, 71, 81, 32, 90, 81, 32, 81, 81, 32, 85, 81, 32, 88, 81, 32, 13, 42, 42, 32, 32, 42, 42, 32, 32, 67, 90, 45, 83, 72, 65, 32, 32, 67, 72, 69, 67, 75, 32, 73, 78, 32, 52, 53, 32, 77, 73, 78, 85, 84, 69, 83, 32, 66, 69, 70, 79, 82, 69, 32, 68, 69, 80, 65, 82, 84, 85, 82, 69, 32, 32, 13, 42, 42, 32, 32, 65, 108, 108, 32, 115, 99, 104, 101, 100, 117, 108, 101, 100, 32, 77, 85, 32, 111, 114, 32, 70, 77, 32, 102, 108, 105, 103, 104, 116, 115, 32, 111, 112, 101, 114, 97, 116, 101, 100, 32, 98, 121, 32, 77, 85, 32, 111, 114, 32, 70, 77, 32, 97, 114, 101, 32, 34, 69, 97, 115, 116, 101, 114, 110, 32, 69, 120, 112, 114, 101, 115, 115, 34, 32, 32, 32, 42, 42, 32, 32, 72, 79, 32, 70, 76, 73, 71, 72, 84, 32, 68, 69, 80, 65, 82, 84, 85, 82, 69, 47, 65, 82, 82, 73, 86, 65, 76, 32, 65, 84, 32, 80, 86, 71, 32, 84, 50, 32, 70, 82, 79, 77, 32, 49, 56, 68, 69, 67, 49, 50, 44, 32, 13, 42, 42, 32, 32, 72, 79, 32, 80, 86, 71, 32, 67, 72, 69, 67, 75, 32, 73, 78, 32, 52, 53, 32, 77, 73, 78, 85, 84, 69, 83, 32, 66, 69, 70, 79, 82, 69, 32, 68, 69, 80, 65, 82, 84, 85, 82, 69, 32, 13, 30 }));
            Assert.AreEqual(string.Join(",", r[2]), string.Join(",", new byte[] { 27, 98 }));
        }
        #endregion

        #region DealFuncGBKFlag
        [TestMethod]
        public void DealFuncGBKFlag_GB2312SpecialCharacter()////上海地区天气预报 “报” is a special character!
        {
            var po = new PrivateObject(new BaseResp(null));
            byte[] arg = new byte[] { 27,14,73,79,58,35,53,88,71,120,76,108,70,120,84,36,35,40};
            var r = (string)po.Invoke("DealFuncGBKFlag", new object[] { arg });
            Assert.AreEqual(r, "上海地区天气预报");
        }
        [TestMethod]
        public void DealFuncGBKFlag_GB2312NormalCharacter()//多云转中雨
        { 
            var po = new PrivateObject(new BaseResp(null));
            byte[] arg = new byte[] { 27,14,54,96,84,70,87,42,86,80,83,106};
            var r = (string)po.Invoke("DealFuncGBKFlag", new object[] { arg });
            Assert.AreEqual(r, "多云转中雨");
        }
        [TestMethod]
        public void DealFuncGBKFlag_GBKInfrequentlyUsedCharacter()//朱镕基 “镕” is not a frequently used character
        {
            var po = new PrivateObject(new BaseResp(null));
            byte[] arg = new byte[] { 27,14,86, 108, 120, 77, 100, 69, 59, 121 };
            var r = (string)po.Invoke("DealFuncGBKFlag", new object[] { arg });
            Assert.AreEqual(r, "朱镕基");
        }
        #endregion

        #region DealFuncPointFlag

        #endregion

        #region DealFuncASCIIFlag
        [TestMethod]
        public void DealFuncASCIIFlag_Test()
        {
            var po = new PrivateObject(new BaseResp(null));
            byte[] arg = new byte[] {27,15,32,51,50,67,40,57,48,70,41,44,32};
            var r = (string)po.Invoke("DealFuncASCIIFlag", new object[] { arg });
            Assert.AreEqual(r, " 32C(90F), ");
        }
        #endregion

        #region BaseResp
        [TestMethod]
        public void BaseResp_Test()
        {
            byte[] arg = new byte[] { 1, 0, 1, 194, 0, 0, 0, 1, 40, 81, 112, 2, 27, 11, 49, 32, 15, 27, 77, 27, 14, 73, 79, 58, 35, 53, 88, 71, 120, 76, 108, 70, 120, 84, 36, 35, 40, 27, 15, 58, 32, 32, 32, 13, 32, 32, 32, 32, 32, 57, 27, 14, 84, 66, 27, 15, 50, 52, 27, 14, 72, 85, 27, 15, 32 ,27,98,13,30,27,98,3};
            var r = new BaseResp(arg);
            var except = "上海地区天气预报:   \r     9月24日 ";
            Assert.AreEqual(except, r.Text);
        }
        #endregion

    }
}
